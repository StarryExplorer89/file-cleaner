name: Build PyInstaller

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            extension: exe
          - os: macos-latest
            extension: app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build with PyInstaller
        run: |
          pyinstaller --windowed --additional-hooks-dir=. --icon=assets/app_icon.ico -F file_cleaner_gui.py
        shell: bash

      - name: Rename output file
        run: |
          mv dist/file_cleaner_gui dist/File_Cleaner.${{ matrix.extension }}

      - name: Check if release exists
        id: check_release
        uses: octokit/request-action@v2
        with:
          route: GET /repos/${{ github.repository }}/releases/tags/v1.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create or update release
        id: create_release
        run: |
          if [ "${{ steps.check_release.outputs.status }}" == "200" ]; then
            echo "Release exists, updating..."
            gh release upload v1.2 dist/File_Cleaner.${{ matrix.extension }} dist/File_Cleaner.zip --clobber
          else
            echo "Creating new release..."
            gh release create v1.2 dist/File_Cleaner.${{ matrix.extension }} dist/File_Cleaner.zip --title "File Cleaner v1.2" --notes "New release"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .exe artifact (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/File_Cleaner.exe
          asset_name: File_Cleaner.exe
          asset_content_type: application/octet-stream

      - name: Upload .zip artifact (macOS only)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/File_Cleaner.zip
          asset_name: File_Cleaner.zip
          asset_content_type: application/zip
